{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport db from '../../../../firebase';\nimport { useState } from 'react';\nimport React from 'react';\n\nconst firebase = require('firebase');\n\nrequire('firebase/firestore');\n\nrequire('firebase/auth');\n\nexport default function usePartsAndOrder() {\n  _s();\n\n  const [manufactured, setManufactured] = useState(0);\n  const [defective, setDefective] = useState(0);\n  const [process, setProcess] = useState(\"No Order\");\n  const [orderType, setOrderType] = useState('No Order');\n  React.useEffect(() => {\n    db.collection('Order').doc('Status').get().then(doc => {\n      setManufactured(doc.get('Total Manufactured'));\n      setDefective(doc.get('Total Defective'));\n      db.collection('OrderTest').doc('CurrentOrder').onSnapshot(doc => {\n        setProcess(doc.get('Process'));\n\n        if (order !== 'Waiting...') {\n          setProcess(doc.get('Process'));\n          db.collection(\"Order\").orderBy(\"Time\", \"desc\").limit(1).onSnapshot(snapshot => {\n            setOrderType(snapshot.docs[0].data().Type);\n          });\n        }\n      });\n    }); //db.collection(\"Order\").orderBy(\"Time\", \"desc\").limit(1).onSnapshot((snapshot) => {\n    //  setOrderTime( new Date(snapshot.docs[0].data().Time.seconds))\n    //});\n  }, [0]);\n  return {\n    defective,\n    manufactured,\n    order\n  };\n}\n\n_s(usePartsAndOrder, \"g5M9ZH9Q0qt3DBQff6GWOBuW/sI=\");","map":{"version":3,"sources":["C:/Users/HP/Desktop/FSM_Website-routing/src/components/Dashboard/Dashboard Elements/elements/partsAndOrderHook.jsx"],"names":["db","useState","React","firebase","require","usePartsAndOrder","manufactured","setManufactured","defective","setDefective","process","setProcess","orderType","setOrderType","useEffect","collection","doc","get","then","onSnapshot","order","orderBy","limit","snapshot","docs","data","Type"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,sBAAf;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACAA,OAAO,CAAC,oBAAD,CAAP;;AACAA,OAAO,CAAC,eAAD,CAAP;;AAGA,eAAe,SAASC,gBAAT,GAA2B;AAAA;;AACtC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,UAAD,CAAtC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,UAAD,CAA1C;AAEAC,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AAClBd,IAAAA,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2B,QAA3B,EAAqCC,GAArC,GAA2CC,IAA3C,CAAiDF,GAAD,IAAS;AACrDT,MAAAA,eAAe,CAACS,GAAG,CAACC,GAAJ,CAAQ,oBAAR,CAAD,CAAf;AACAR,MAAAA,YAAY,CAACO,GAAG,CAACC,GAAJ,CAAQ,iBAAR,CAAD,CAAZ;AAEIjB,MAAAA,EAAE,CAACe,UAAH,CAAc,WAAd,EAA2BC,GAA3B,CAA+B,cAA/B,EAA+CG,UAA/C,CAA2DH,GAAD,IAAS;AAC/DL,QAAAA,UAAU,CAACK,GAAG,CAACC,GAAJ,CAAQ,SAAR,CAAD,CAAV;;AACA,YAAIG,KAAK,KAAK,YAAd,EAA2B;AACvBT,UAAAA,UAAU,CAACK,GAAG,CAACC,GAAJ,CAAQ,SAAR,CAAD,CAAV;AACAjB,UAAAA,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBM,OAAvB,CAA+B,MAA/B,EAAuC,MAAvC,EAA+CC,KAA/C,CAAqD,CAArD,EAAwDH,UAAxD,CAAoEI,QAAD,IAAc;AAC/EV,YAAAA,YAAY,CAACU,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBC,IAAjB,GAAwBC,IAAzB,CAAZ;AACD,WAFD;AAGH;AACJ,OARD;AAUP,KAdD,EADkB,CAiBlB;AACE;AACF;AAEH,GArBD,EAqBG,CAAC,CAAD,CArBH;AAsBA,SAAM;AACFlB,IAAAA,SADE;AAEFF,IAAAA,YAFE;AAGFc,IAAAA;AAHE,GAAN;AAKH;;GAjCuBf,gB","sourcesContent":["import db from '../../../../firebase';\r\nimport { useState } from 'react';\r\nimport React from 'react';\r\nconst firebase = require('firebase');\r\nrequire('firebase/firestore')\r\nrequire('firebase/auth')\r\n\r\n\r\nexport default function usePartsAndOrder(){\r\n    const [manufactured, setManufactured] = useState(0)\r\n    const [defective, setDefective] = useState(0)\r\n    const [process, setProcess] = useState(\"No Order\")\r\n    const [orderType, setOrderType] = useState('No Order')\r\n\r\n    React.useEffect(() => {\r\n        db.collection('Order').doc('Status').get().then((doc) => {\r\n            setManufactured(doc.get('Total Manufactured'));\r\n            setDefective(doc.get('Total Defective'));\r\n            \r\n                db.collection('OrderTest').doc('CurrentOrder').onSnapshot((doc) => {\r\n                    setProcess(doc.get('Process'));\r\n                    if( order !== 'Waiting...'){\r\n                        setProcess(doc.get('Process'));\r\n                        db.collection(\"Order\").orderBy(\"Time\", \"desc\").limit(1).onSnapshot((snapshot) => {\r\n                          setOrderType(snapshot.docs[0].data().Type)\r\n                        });\r\n                    }\r\n                })\r\n            \r\n        })\r\n\r\n        //db.collection(\"Order\").orderBy(\"Time\", \"desc\").limit(1).onSnapshot((snapshot) => {\r\n          //  setOrderTime( new Date(snapshot.docs[0].data().Time.seconds))\r\n        //});\r\n\r\n    }, [0])\r\n    return{\r\n        defective,\r\n        manufactured,\r\n        order\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}