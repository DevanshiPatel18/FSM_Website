{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\FSM_Website-routing\\\\src\\\\components\\\\Dashboard\\\\Dashboard Elements\\\\elements\\\\donutchart.jsx\",\n    _s = $RefreshSig$();\n\nimport { blue, green, orange } from '@material-ui/core/colors';\nimport { Doughnut, Chart } from 'react-chartjs-2';\nimport useWorsktationTimeAnalytics from './workstationTimeAnalysis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DonutGraph() {\n  _s();\n\n  const {\n    workstation1Time,\n    workstation2Time,\n    workstation3Time\n  } = useWorsktationTimeAnalytics();\n  console.log(workstation1Time + \" \" + workstation2Time + \" \" + workstation3Time);\n  const data = {\n    height: 40 + 'vh',\n    labels: ['Workstation 1', 'Workstation 2', 'Workstation 3'],\n    datasets: [{\n      label: 'My First Dataset',\n      data: [workstation1Time.time, workstation2Time.time, workstation3Time.time],\n      backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)'],\n      hoverOffset: 2\n    }]\n  };\n  const config = {\n    reponsive: true,\n    maintainAspectRatio: false,\n    elements: {\n      arc: {\n        radius: 2\n      }\n    },\n    scales: {\n      x: {\n        display: false,\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        display: false,\n        grid: {\n          display: false\n        }\n      }\n    },\n    interaction: {\n      intersect: false\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'bottom',\n        labels: {\n          fontSize: 0.1 + 'vw',\n          color: 'hsl(238, 61%, 19%)',\n          font: '\"Baloo Da 2\", cursive'\n        }\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: function (tooltipItem, data) {\n          //get the concerned dataset\n          var dataset = data.datasets[tooltipItem.datasetIndex]; //calculate the total of this data set\n\n          var total = dataset.data.reduce(function (previousValue, currentValue, currentIndex, array) {\n            return previousValue + currentValue;\n          }); //get the current items value\n\n          var currentValue = dataset.data[tooltipItem.index]; //calculate the precentage based on the total and current item, also this does a rough rounding to give a whole number\n\n          var percentage = Math.floor(currentValue / total * 100 + 0.5);\n          return percentage + \"%\";\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {},\n    children: /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: data,\n      options: config\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 11\n  }, this);\n}\n\n_s(DonutGraph, \"8K6EZvMgl6MYNKuHTPSX7Zx0Vkg=\", false, function () {\n  return [useWorsktationTimeAnalytics];\n});\n\n_c = DonutGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutGraph\");","map":{"version":3,"sources":["C:/Users/HP/Desktop/FSM_Website-routing/src/components/Dashboard/Dashboard Elements/elements/donutchart.jsx"],"names":["blue","green","orange","Doughnut","Chart","useWorsktationTimeAnalytics","DonutGraph","workstation1Time","workstation2Time","workstation3Time","console","log","data","height","labels","datasets","label","time","backgroundColor","hoverOffset","config","reponsive","maintainAspectRatio","elements","arc","radius","scales","x","display","grid","y","interaction","intersect","plugins","legend","position","fontSize","color","font","tooltips","callbacks","tooltipItem","dataset","datasetIndex","total","reduce","previousValue","currentValue","currentIndex","array","index","percentage","Math","floor"],"mappings":"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","sourcesContent":["import { blue, green, orange } from '@material-ui/core/colors';\r\nimport {Doughnut, Chart} from 'react-chartjs-2';\r\nimport useWorsktationTimeAnalytics from './workstationTimeAnalysis';\r\n\r\nexport default function DonutGraph(){\r\n\r\n  const { workstation1Time, workstation2Time, workstation3Time} = useWorsktationTimeAnalytics()\r\n  console.log(workstation1Time + \" \" + workstation2Time + \" \"+ workstation3Time)\r\nconst data = {\r\n    height: 40+'vh',\r\n    labels: [\r\n      'Workstation 1',\r\n      'Workstation 2',\r\n      'Workstation 3'\r\n    ],\r\n    datasets: [{\r\n      label: 'My First Dataset',\r\n      data: [workstation1Time.time, workstation2Time.time, workstation3Time.time],\r\n      backgroundColor: [\r\n        'rgb(255, 99, 132)',\r\n        'rgb(54, 162, 235)',\r\n        'rgb(255, 205, 86)'\r\n      ],\r\n      hoverOffset: 2,\r\n      \r\n    }]\r\n  };  \r\n  const config = {\r\n     \r\n    reponsive: true,\r\n    maintainAspectRatio: false,\r\n    elements: {\r\n        arc: {\r\n            radius: 2\r\n        }\r\n    },\r\n      scales: {\r\n        x: {\r\n            display: false,\r\n            grid: {\r\n                display: false\r\n            }\r\n        },\r\n        y: {\r\n            display: false,\r\n            grid: {\r\n                display: false\r\n            }\r\n        }\r\n      },\r\n      interaction: {\r\n        intersect: false\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'bottom',\r\n          labels: {\r\n            fontSize: 0.1+'vw',\r\n            color: 'hsl(238, 61%, 19%)',\r\n            font: '\"Baloo Da 2\", cursive'\r\n          }\r\n        }\r\n      },tooltips: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            //get the concerned dataset\r\n            var dataset = data.datasets[tooltipItem.datasetIndex];\r\n            //calculate the total of this data set\r\n            var total = dataset.data.reduce(function(previousValue, currentValue, currentIndex, array) {\r\n              return previousValue + currentValue;\r\n            });\r\n            //get the current items value\r\n            var currentValue = dataset.data[tooltipItem.index];\r\n            //calculate the precentage based on the total and current item, also this does a rough rounding to give a whole number\r\n            var percentage = Math.floor(((currentValue/total) * 100)+0.5);\r\n      \r\n            return percentage + \"%\";\r\n          }\r\n        }\r\n      } \r\n  };\r\n\r\n  \r\n\r\n\r\n      return(\r\n          <div style={{}}>\r\n          <Doughnut data={data} options = {config}/>\r\n          </div>\r\n      )\r\n  }"]},"metadata":{},"sourceType":"module"}