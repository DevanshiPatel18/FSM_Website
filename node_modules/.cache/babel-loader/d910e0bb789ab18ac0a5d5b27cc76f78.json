{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport db from '../../../../firebase';\n\nconst firebase = require('firebase');\n\nrequire('firebase/firestore');\n\nrequire('firebase/auth');\n\nvar numberOfEntries = 0;\nexport default function useParameterValues() {\n  _s();\n\n  const [avgOEE, setAvgOEE] = useState([0]);\n  const [avgAvail, setAvgAvail] = useState([0]);\n  const [avgPer, setAvgPer] = useState([0]);\n  const [avgQual, setAvgQual] = useState([0]);\n  const [currentOEE, setCurrentOEE] = useState([0]);\n  const [currentAvail, setCurrentAvail] = useState([0]);\n  const [currentQual, setCurrentQual] = useState([0]);\n  const [currentPer, setCurrentPer] = useState([0]);\n  console.log(avgOEE + \" \" + avgAvail + \" \" + avgPer + \" \" + avgQual);\n  db.collection('Realtime').doc('WS 1').onSnapshot(doc => {\n    console.log(doc.data().oee);\n    numberOfEntries += 1;\n    setCurrentOEE(doc.data().oee);\n    setCurrentAvail(doc.data().availability);\n    setCurrentPer(doc.data().performance);\n    setCurrentQual(doc.data().quality);\n    console.log(currentOEE + \" \" + currentAvail + \" \" + currentPer + \" \" + currentQual);\n    setAvgOEE((avgOEE * numberOfEntries + currentOEE) / (numberOfEntries + 1));\n    setAvgAvail((avgAvail * numberOfEntries + currentAvail) / (numberOfEntries + 1));\n    setAvgQual((avgQual * numberOfEntries + currentQual) / (numberOfEntries + 1));\n    setAvgPer((avgPer * numberOfEntries + currentPer) / (numberOfEntries + 1));\n    console.log(avgOEE + \" \" + avgAvail + \" \" + avgPer + \" \" + avgQual);\n  });\n  return {\n    setAvgAvail,\n    setAvgOEE,\n    setAvgPer,\n    setAvgQual,\n    avgOEE,\n    avgAvail,\n    avgPer,\n    avgQual\n  };\n}\n/*const onRefresh = chart => {\r\n  const now = Date.now();\r\n  numberOfEntries += 1;\r\n  let currentOEE =0;\r\n  let currentAvail =0;\r\n  let currentQual =0;\r\n  let currentPer =0;\r\n  if( props.token ){\r\n  db.collection('Realtime').doc('WS 1').get().then((doc) => {\r\n    console.log('hello')\r\n    currentOEE = doc.data().oee + Math.random()*100\r\n    currentAvail = doc.data().availability +  Math.random()*100\r\n    currentQual = doc.data().quality +  Math.random()*100\r\n    currentPer = doc.data().performance +  Math.random()*100\r\n    console.log(avgOEE + \",\" + avgAvail+','+avgPer+','+avgQual);\r\n    //chart.data.datasets.forEach((dataset,id) => {\r\n      //dataset.data.push({\r\n       // x: now,\r\n        //y: doc.data().id\r\n      //});\r\n    //});\r\n    chart.data.datasets[0].data.push({x: now, y: currentOEE})\r\n    chart.data.datasets[1].data.push({x: now, y: currentPer})\r\n    chart.data.datasets[2].data.push({x: now, y: currentQual})\r\n    chart.data.datasets[3].data.push({x: now, y: currentAvail})\r\n\r\n\r\n\r\n    \r\n  })\r\n  setAvgOEE((avgOEE*numberOfEntries + currentOEE)/(numberOfEntries+1));\r\n  setAvgAvail((avgAvail*numberOfEntries + currentAvail)/(numberOfEntries+1));\r\n  setAvgQual((avgQual*numberOfEntries + currentQual)/(numberOfEntries+1));\r\n  setAvgPer((avgPer*numberOfEntries + currentPer)/(numberOfEntries+1));\r\n\r\n\r\n};\r\n}*/\n\n_s(useParameterValues, \"hmZAQua5skZKRmd4hXVutGUNDQM=\");","map":{"version":3,"sources":["C:/Users/HP/Desktop/FSM_Website-routing/src/components/Dashboard/Dashboard Elements/elements/parametValues.jsx"],"names":["useState","db","firebase","require","numberOfEntries","useParameterValues","avgOEE","setAvgOEE","avgAvail","setAvgAvail","avgPer","setAvgPer","avgQual","setAvgQual","currentOEE","setCurrentOEE","currentAvail","setCurrentAvail","currentQual","setCurrentQual","currentPer","setCurrentPer","console","log","collection","doc","onSnapshot","data","oee","availability","performance","quality"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport db from '../../../../firebase';\r\nconst firebase = require('firebase');\r\nrequire('firebase/firestore')\r\nrequire('firebase/auth')\r\n\r\nvar numberOfEntries = 0;\r\n\r\nexport default function useParameterValues(){\r\n    const [avgOEE, setAvgOEE] = useState([0]);\r\n    const [avgAvail, setAvgAvail] = useState([0]);\r\n    const [avgPer, setAvgPer] = useState([0]);\r\n    const [avgQual, setAvgQual] = useState([0]);\r\n    const [currentOEE, setCurrentOEE] = useState([0]);\r\n    const [currentAvail, setCurrentAvail] = useState([0]);\r\n    const [currentQual, setCurrentQual] = useState([0]);\r\n    const [currentPer, setCurrentPer] = useState([0]);\r\n\r\n    console.log(avgOEE+\" \"+avgAvail+\" \"+avgPer+\" \"+avgQual)\r\n\r\n    db.collection('Realtime').doc('WS 1').onSnapshot((doc) => {\r\n      console.log(doc.data().oee)\r\n        numberOfEntries += 1;\r\n        setCurrentOEE(doc.data().oee);\r\n        setCurrentAvail(doc.data().availability);\r\n        setCurrentPer(doc.data().performance);\r\n        setCurrentQual(doc.data().quality);\r\n        console.log(currentOEE+\" \"+currentAvail+\" \"+currentPer+\" \"+currentQual)\r\n\r\n        setAvgOEE((avgOEE*numberOfEntries + currentOEE)/(numberOfEntries+1));\r\n        setAvgAvail((avgAvail*numberOfEntries + currentAvail)/(numberOfEntries+1));\r\n        setAvgQual((avgQual*numberOfEntries + currentQual)/(numberOfEntries+1));\r\n        setAvgPer((avgPer*numberOfEntries + currentPer)/(numberOfEntries+1));\r\n\r\n        console.log(avgOEE+\" \"+avgAvail+\" \"+avgPer+\" \"+avgQual)\r\n\r\n\r\n    })\r\nreturn{\r\n    setAvgAvail,\r\n    setAvgOEE,\r\n    setAvgPer,\r\n    setAvgQual,\r\n    avgOEE,\r\n    avgAvail,\r\n    avgPer,\r\n    avgQual\r\n}\r\n}\r\n\r\n/*const onRefresh = chart => {\r\n  const now = Date.now();\r\n  numberOfEntries += 1;\r\n  let currentOEE =0;\r\n  let currentAvail =0;\r\n  let currentQual =0;\r\n  let currentPer =0;\r\n  if( props.token ){\r\n  db.collection('Realtime').doc('WS 1').get().then((doc) => {\r\n    console.log('hello')\r\n    currentOEE = doc.data().oee + Math.random()*100\r\n    currentAvail = doc.data().availability +  Math.random()*100\r\n    currentQual = doc.data().quality +  Math.random()*100\r\n    currentPer = doc.data().performance +  Math.random()*100\r\n    console.log(avgOEE + \",\" + avgAvail+','+avgPer+','+avgQual);\r\n    //chart.data.datasets.forEach((dataset,id) => {\r\n      //dataset.data.push({\r\n       // x: now,\r\n        //y: doc.data().id\r\n      //});\r\n    //});\r\n    chart.data.datasets[0].data.push({x: now, y: currentOEE})\r\n    chart.data.datasets[1].data.push({x: now, y: currentPer})\r\n    chart.data.datasets[2].data.push({x: now, y: currentQual})\r\n    chart.data.datasets[3].data.push({x: now, y: currentAvail})\r\n\r\n\r\n\r\n    \r\n  })\r\n  setAvgOEE((avgOEE*numberOfEntries + currentOEE)/(numberOfEntries+1));\r\n  setAvgAvail((avgAvail*numberOfEntries + currentAvail)/(numberOfEntries+1));\r\n  setAvgQual((avgQual*numberOfEntries + currentQual)/(numberOfEntries+1));\r\n  setAvgPer((avgPer*numberOfEntries + currentPer)/(numberOfEntries+1));\r\n\r\n\r\n};\r\n}*/"]},"metadata":{},"sourceType":"module"}