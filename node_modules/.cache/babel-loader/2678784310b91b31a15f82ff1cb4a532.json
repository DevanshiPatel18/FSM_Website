{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport db from '../../../../firebase';\n\nrequire('firebase/firestore');\n\nrequire('firebase/auth');\n\nexport default function useWorsktationTimeAnalytics() {\n  _s();\n\n  const [workstation1Time, setWorkstation1Time] = useState({\n    entry: false,\n    entryTimestamp: new Date(),\n    exitTimeStamp: new Date(),\n    exit: false,\n    time: 10\n  });\n  const [workstation2Time, setWorkstation2Time] = useState({\n    entry: false,\n    exit: false,\n    entryTimestamp: new Date(),\n    exitTimeStamp: new Date(),\n    time: 10\n  });\n  const [workstation3Time, setWorkstation3Time] = useState({\n    entry: false,\n    exit: false,\n    entryTimestamp: new Date(),\n    exitTimeStamp: new Date(),\n    time: 10\n  });\n  React.useEffect(() => {\n    //db.collection(\"Order\").orderBy(\"Time\", \"desc\").limit(1).onSnapshot((snapshot) => {\n    //  setOrderTime( new Date(snapshot.docs[0].data().Time.seconds))\n    //});\n    db.collection('Realtime').doc('WS 1').onSnapshot(snapshot => {\n      //console.log(snapshot.docs[0].data().timeStamp + \" \" +snapshot.docs[1].data().timeStamp + \" \" +snapshot.docs[2].data().timeStamp)\n      if (workstation1Time.entry == false) {\n        if (snapshot.data().entry == 'true') {\n          setWorkstation1Time({ ...workstation1Time,\n            entry: true,\n            entryTimestamp: new Date().getTime()\n          });\n        }\n      }\n\n      if (workstation1Time.exit == false) {\n        if (snapshot.data().exit == 'true') {\n          setWorkstation1Time({ ...workstation1Time,\n            entryTimestamp: new Date().getTime()\n          });\n        }\n      }\n\n      if (workstation1Time.entry == true && workstation1Time.exit == true) {\n        let newtime = (workstation1Time.exit - workstation1Time.entry) / 60;\n        setWorkstation1Time({ ...workstation1Time,\n          time: newtime\n        });\n      }\n    });\n    db.collection('Realtime').doc('WS 2').onSnapshot(snapshot => {\n      //console.log(snapshot.docs[0].data().timeStamp + \" \" +snapshot.docs[1].data().timeStamp + \" \" +snapshot.docs[2].data().timeStamp)\n      if (workstation2Time.entry == false) {\n        if (snapshot.data().entry == 'true') {\n          setWorkstation2Time({ ...workstation2Time,\n            entry: true,\n            entryTimestamp: new Date().getTime()\n          });\n        }\n      }\n\n      if (workstation2Time.exit == false) {\n        if (snapshot.data().exit == 'true') {\n          setWorkstation2Time({ ...workstation2Time,\n            entryTimestamp: new Date().getTime()\n          });\n        }\n      }\n\n      if (workstation2Time.entry == true && workstation2Time.exit == true) {\n        let newtime = (workstation2Time.exit - workstation2Time.entry) / 60;\n        setWorkstation2Time({ ...workstation2Time,\n          time: newtime\n        });\n      }\n    });\n    db.collection('Realtime').doc('WS 3').onSnapshot(snapshot => {\n      //console.log(snapshot.docs[0].data().timeStamp + \" \" +snapshot.docs[1].data().timeStamp + \" \" +snapshot.docs[2].data().timeStamp)\n      if (workstation3Time.entry == false) {\n        if (snapshot.data().entry == 'true') {\n          setWorkstation3Time({ ...workstation3Time,\n            entry: true,\n            entryTimestamp: new Date().getTime()\n          });\n        }\n      }\n\n      if (workstation3Time.exit == false) {\n        if (snapshot.data().exit == 'true') {\n          setWorkstation3Time({ ...workstation3Time,\n            entryTimestamp: new Date().getTime()\n          });\n        }\n      }\n\n      if (workstation3Time.entry == true && workstation3Time.exit == true) {\n        let newtime = (workstation3Time.exit - workstation3Time.entry) / 60;\n        setWorkstation3Time({ ...workstation3Time,\n          time: newtime\n        });\n      }\n    }); //let time1 = snapshot.docs[0].data().timeStamp\n    //let time2 = snapshot.docs[1].data().timeStamp\n    //let time3 = snapshot.docs[2].data().timeStamp\n    //console.log(time1.split(\" \")[1].split('.'))\n  }, []);\n  console.log(workstation1Time.time);\n  return {\n    workstation1Time,\n    workstation2Time,\n    workstation3Time\n  };\n}\n\n_s(useWorsktationTimeAnalytics, \"CYONExGM/27y46/jkdz0PrBdBcE=\");","map":{"version":3,"sources":["C:/Users/HP/Desktop/FSM_Website-routing/src/components/Dashboard/Dashboard Elements/elements/workstationTimeAnalysis.jsx"],"names":["React","useState","db","require","useWorsktationTimeAnalytics","workstation1Time","setWorkstation1Time","entry","entryTimestamp","Date","exitTimeStamp","exit","time","workstation2Time","setWorkstation2Time","workstation3Time","setWorkstation3Time","useEffect","collection","doc","onSnapshot","snapshot","data","getTime","newtime","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState} from 'react';\r\nimport db from '../../../../firebase';\r\nrequire('firebase/firestore')\r\nrequire('firebase/auth')\r\n\r\n\r\nexport default function useWorsktationTimeAnalytics(){\r\n    const [workstation1Time, setWorkstation1Time] = useState({\r\n        entry: false,\r\n        entryTimestamp: new Date(),\r\n        exitTimeStamp: new Date(),\r\n        exit: false,\r\n        time: 10\r\n    });\r\n    const [workstation2Time, setWorkstation2Time] = useState({\r\n        entry: false,\r\n        exit: false,\r\n        entryTimestamp: new Date(),\r\n        exitTimeStamp: new Date(),\r\n        time: 10\r\n    });\r\n    const [workstation3Time, setWorkstation3Time] = useState({\r\n        entry: false,\r\n        exit: false,\r\n        entryTimestamp: new Date(),\r\n        exitTimeStamp: new Date(),\r\n        time: 10\r\n    });\r\n\r\n    React.useEffect(() => {\r\n   \r\n        \r\n        //db.collection(\"Order\").orderBy(\"Time\", \"desc\").limit(1).onSnapshot((snapshot) => {\r\n          //  setOrderTime( new Date(snapshot.docs[0].data().Time.seconds))\r\n        //});\r\n\r\n        db.collection('Realtime').doc('WS 1').onSnapshot((snapshot) => {\r\n            //console.log(snapshot.docs[0].data().timeStamp + \" \" +snapshot.docs[1].data().timeStamp + \" \" +snapshot.docs[2].data().timeStamp)\r\n                if(workstation1Time.entry == false){\r\n                   if(snapshot.data().entry == 'true'){\r\n                    setWorkstation1Time({...workstation1Time, entry: true, entryTimestamp: new Date().getTime()})\r\n                     }\r\n            }\r\n                if(workstation1Time.exit == false){\r\n                    if(snapshot.data().exit == 'true'){\r\n                        setWorkstation1Time({...workstation1Time, entryTimestamp: new Date().getTime()})\r\n                    }\r\n            }\r\n\r\n            if(workstation1Time.entry == true && workstation1Time.exit == true){\r\n                let newtime = ((workstation1Time.exit - workstation1Time.entry)/60);\r\n                setWorkstation1Time({...workstation1Time, time : newtime })\r\n            }\r\n\r\n            })\r\n\r\n            db.collection('Realtime').doc('WS 2').onSnapshot((snapshot) => {\r\n                //console.log(snapshot.docs[0].data().timeStamp + \" \" +snapshot.docs[1].data().timeStamp + \" \" +snapshot.docs[2].data().timeStamp)\r\n                    if(workstation2Time.entry == false){\r\n                       if(snapshot.data().entry == 'true'){\r\n                        setWorkstation2Time({...workstation2Time, entry: true, entryTimestamp: new Date().getTime()})\r\n                         }\r\n                }\r\n                    if(workstation2Time.exit == false){\r\n                        if(snapshot.data().exit == 'true'){\r\n                            setWorkstation2Time({...workstation2Time, entryTimestamp: new Date().getTime()})\r\n                        }\r\n                }\r\n    \r\n                if(workstation2Time.entry == true && workstation2Time.exit == true){\r\n                    let newtime = ((workstation2Time.exit - workstation2Time.entry)/60);\r\n                    setWorkstation2Time({...workstation2Time, time : newtime })\r\n                }\r\n    \r\n                })\r\n    \r\n                db.collection('Realtime').doc('WS 3').onSnapshot((snapshot) => {\r\n                    //console.log(snapshot.docs[0].data().timeStamp + \" \" +snapshot.docs[1].data().timeStamp + \" \" +snapshot.docs[2].data().timeStamp)\r\n                        if(workstation3Time.entry == false){\r\n                           if(snapshot.data().entry == 'true'){\r\n                            setWorkstation3Time({...workstation3Time, entry: true, entryTimestamp: new Date().getTime()})\r\n                             }\r\n                    }\r\n                        if(workstation3Time.exit == false){\r\n                            if(snapshot.data().exit == 'true'){\r\n                                setWorkstation3Time({...workstation3Time, entryTimestamp: new Date().getTime()})\r\n                            }\r\n                    }\r\n        \r\n                    if(workstation3Time.entry == true && workstation3Time.exit == true){\r\n                        let newtime = ((workstation3Time.exit - workstation3Time.entry)/60);\r\n                        setWorkstation3Time({...workstation3Time, time : newtime })\r\n                    }\r\n        \r\n                    })\r\n        \r\n                        \r\n            //let time1 = snapshot.docs[0].data().timeStamp\r\n           //let time2 = snapshot.docs[1].data().timeStamp\r\n           //let time3 = snapshot.docs[2].data().timeStamp\r\n            //console.log(time1.split(\" \")[1].split('.'))\r\n            \r\n        }, [])\r\n\r\n    \r\n        console.log(workstation1Time.time)\r\n    return{\r\n        workstation1Time,\r\n        workstation2Time,\r\n        workstation3Time\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}